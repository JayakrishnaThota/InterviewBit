public class Solution {
    public ArrayList<Integer> equal(ArrayList<Integer> A) {
        ArrayList<Integer> res = new ArrayList<>();
        Map<Integer, List<Integer>> sumIdxes = new HashMap<>();
        
        for (int i = 0; i < A.size(); i++) {
            for (int j = i+1; j < A.size(); j++) {
                int sum = A.get(i) + A.get(j);
                if (sumIdxes.get(sum) != null) {
                    List<Integer> newres = new ArrayList<>(sumIdxes.get(sum));
                    if (!newres.contains(i) && !newres.contains(j)) {
                        newres.add(i);
                        newres.add(j);
                        checkAndSetRes(res, newres);
                    }
                    continue;
                }
                List<Integer> idxs = new ArrayList<>();
                idxs.add(i);
                idxs.add(j);
                sumIdxes.put(sum, idxs);
            }
        }
        
        return res;
    }
    
    private void checkAndSetRes(List<Integer> res, List<Integer> newres) {
        if (res.isEmpty() || (newres.get(0) < res.get(0)) ||
            (newres.get(0) == res.get(0) && newres.get(1) < res.get(1)) ||
            (newres.get(0) == res.get(0) && newres.get(1) == res.get(1) &&
                newres.get(2) < res.get(2)) ||
            (newres.get(0) == res.get(0) && newres.get(1) == res.get(1) &&
                newres.get(2) == res.get(2) && newres.get(3) < res.get(3))) {
                    res.clear();
                    res.addAll(newres);
                }    
    }
}
