public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int[] nums = new int[A.size()];
        for(int i=0;i<nums.length;i++)
        nums[i] = A.get(i);
        return maxSubArray(nums);
    }
    public int maxSubArray(int[] nums) {
        //Sanity check
        if(nums==null || nums.length==0) return 0;
        int maxsofar = nums[0], maxendinghere = nums[0];
        for(int i=1;i<nums.length;i++){
            maxsofar = Math.max(maxsofar+nums[i],nums[i]);
            maxendinghere = Math.max(maxsofar, maxendinghere);
        }
        return maxendinghere;
    }
}

/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example:

Given the array [-2,1,-3,4,-1,2,1,-5,4],

the contiguous subarray [4,-1,2,1] has the largest sum = 6.

For this problem, return the maximum sum.
*/
