public class Solution {
    public int divide(int dividend, int divisor) {
    int sign = 1;
        if((dividend<0&&divisor>0)|| (dividend>0&&divisor<0)) sign = -1;
        long ldividend = (Math.abs((long)dividend));
        long ldivisor  = (Math.abs((long)divisor));
        //Edge cases
        if(ldividend==0 || ldividend<ldivisor) return 0;
        if(ldivisor==0) return (sign==1)?Integer.MAX_VALUE:Integer.MIN_VALUE;
        long lans = ldivide(ldividend, ldivisor);
        int ans = 1;
        if(lans>Integer.MAX_VALUE){
            return (sign==1)?Integer.MAX_VALUE:Integer.MIN_VALUE;
        }
        ans = (int)(sign*lans);
        return ans;
    }
    public long ldivide(long ldividend, long ldivisor){
        if(ldividend<ldivisor) return 0;
        long sum = ldivisor;
        long multiple = 1;
        while((sum+sum)<=ldividend){
            sum+=sum;
            multiple+=multiple;
        }
        return multiple + ldivide(ldividend-sum, ldivisor);
    }
}
