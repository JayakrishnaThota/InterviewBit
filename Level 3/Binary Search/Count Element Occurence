public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int findCount(final List<Integer> A, int B) {
        ArrayList<Integer> list = searchRange(A,B);
        if(list.get(0)==-1 || list.get(1)==-1) return 0;
        return list.get(1)-list.get(0)+1;
    }
    public ArrayList<Integer> searchRange(final List<Integer> A, int B) {
	    
	    int low, up;
	    ArrayList<Integer> res = new ArrayList<>();
	    
	    low = lowerBound(A, 0, A.size() - 1, B);
	    
	    if (low == -1) {
	        res.add(-1);
	        res.add(-1);
	        return res;
	    }
	       
	   up = upperBound(A, 0, A.size() - 1, B);
	   
	   res.add(low);
	   res.add(up);
	   
	   return res;
	    
	    
	}
	
	public int lowerBound(final List<Integer> A, int start, int end, int num) {
	    
	    int steps = end - start + 1;
	    int mid;
	    int low = -1;
	    int val;
	    
	    while (steps > 0) {
	        
	        mid = (start + end) / 2;
	        val = A.get(mid);
	        
	        if (num < val) {
	            end = mid - 1;
	        } else if (num > val) {
	            start = mid + 1;
	        } else {
	            low = mid;
	            end = mid - 1;
	        }
	        
	        steps /= 2;
	    }
	    
	    return low;
	    
	}
	
	public int upperBound(final List<Integer> A, int start, int end, int num) {
	    
	    int steps = end - start + 1;
	    int mid;
	    int up = end + 1;
	    int val;
	    
	    while (steps > 0) {
	        
	        mid = (start + end) / 2;
	        val = A.get(mid);
	        
	        if (num < val) {
	            end = mid - 1;
	        } else if (num > val) {
	            start = mid + 1;
	        } else {
	            up = mid;
	            start = mid + 1;
	        }
	        
	        steps /= 2;
	    }
	    
	    return up;
	    
	}
}
