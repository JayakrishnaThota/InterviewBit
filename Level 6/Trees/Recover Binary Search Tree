public class Solution {
    public ArrayList<Integer> recoverTree(TreeNode root) {
    if(root==null) return new ArrayList();
        ArrayList<Integer> list = inorderTraversal(root);
        ArrayList<Integer> result = new ArrayList();
        boolean flag= true;
        int temp1=0, temp2=0;
        for(int i=0;i<list.size();i++){
            if(i==0 || list.get(i-1) < list.get(i)) continue;
            if(flag) { temp1 = list.get(i-1); temp2 = list.get(i); flag = false; }
            else { temp2 = list.get(i); break; }
        }
        result.add(temp2);
        result.add(temp1);
        return result;
    }
    
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList();
        if(root==null) return list;
        Stack<TreeNode> stack = new Stack();
        boolean done = false;
        TreeNode cur = root;
        while(!done){
            if(cur!=null){
                stack.push(cur);
                cur = cur.left;
            }
            else{
                if(stack.isEmpty())
                    done = true;
                else{
                    cur = stack.pop();
                    list.add(cur.val);
                    cur = cur.right;
                }
            }
        }
        return list;
    }
}
